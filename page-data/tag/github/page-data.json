{"componentChunkName":"component---src-templates-tag-index-js","path":"/tag/github/","result":{"data":{"site":{"siteMetadata":{"title":"Luciano Mammino \"Loige\" - Cloud developer, entrepreneur, fighter, butterfly maker!"}}},"pageContext":{"posts":[{"timeToRead":4,"excerpt":"Axosoft is currently working on GitKraken an innovative multi-platform graphical client for git which is already available for Windows, Linux and Mac OSX in private beta version. The private beta is accessible through an invite code.\nI was lucky to get an invite for me and I have some extra invites that I am willing to share with the first people who is going to leave a comment on this post. UPDATE 2016-01-19 22:00 GMT: I finished all the invites in less than 1 hour! That’s incredible :O Sorry for whoever…","fields":{"slug":"get-an-invitation-for-gitkraken"},"frontmatter":{"date":"19 January, 2016","title":"Get an invitation for GitKraken","tags":["git","github"],"header_img":{"publicURL":"/static/80beb8f4a5437b31dcddd18cfc95864c/get-an-invitation-for-gitkraken-loige-co-luciano-mammino.png"}}},{"timeToRead":3,"excerpt":"A couple of days ago I had the need to store the MongoDB connection string for a Node.js application I am currently building.\nOf course it was not a big deal and at first I stored it in a file.\nAnyway at some point I realised that I would needed to override parts of this string to change some settings in production (e.g. adding replicas and authentication settings).\nFor this sake it would have been nice to have a way to store this configuration as a “well organised” object and then override just the…","fields":{"slug":"introducing-mongo-uri-builder-a-nodejs-module-to-easily-create-mongodb-connection-strings-using-objects"},"frontmatter":{"date":"29 September, 2015","title":"Introducing mongo-uri-builder, a Node.js module to easily create mongodb connection strings using objects","tags":["node-js","library","mongodb","github"],"header_img":{"publicURL":"/static/2631a85bd72a9afcb89633ddc1e4af8d/mongo-uri-builder-article-sample-image.jpg"}}},{"timeToRead":7,"excerpt":"In my previous post I introduced my latest library PHPoAuthUserData that allows to abstract the process of\nextracting user profile data from various OAuth providers (Facebook, Twitter, Linkedin, etc). The library still need a lot of work, especially to write the logic to extract data from all the services available in the parent OAuth library. At the moment the library supports only the most common OAuth providers. I would be glad to support all the following services: Amazon, BitBucket, BitLy, Box…","fields":{"slug":"writing-a-new-extractor-for-php-oauth-user-data"},"frontmatter":{"date":"10 February, 2014","title":"Writing a new Extractor for PHPoAuthUserData","tags":["library","php","oauth","instagram","github"],"header_img":{"publicURL":"/static/2b7feb53d0157af72b99ac387c4eaa0a/writing-a-new-extractor-for-php-oauth-user-data.png"}}},{"timeToRead":2,"excerpt":"I recently wrote a new PHP library to simplify the extraction of user data (name, email, id, etc…) from various OAuth providers such as Facebook, Twitter and Linkedin. Is well know that OAuth 1 and 2 are great standard protocols to authenticate users in our apps. Anyway we often need to go further the authentication process and extract various information about the authenticated users. Unfortunately this is something that is not standardized and obviously each OAuth provider manages user data in very…","fields":{"slug":"new-php-library-php-oauth-user-data"},"frontmatter":{"date":"10 February, 2014","title":"New PHP library: PHPoAuthUserData","tags":["library","php","oauth","github"],"header_img":{"publicURL":"/static/ddcc163ff1c49cc9df72dc028b58e5a7/new-php-library-php-oauth-user-data.png"}}}],"tag":"github"}},"staticQueryHashes":[]}