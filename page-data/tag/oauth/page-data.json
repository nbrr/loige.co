{"componentChunkName":"component---src-templates-tag-index-js","path":"/tag/oauth/","result":{"data":{"site":{"siteMetadata":{"title":"Luciano Mammino \"Loige\" - Cloud developer, entrepreneur, fighter, butterfly maker!"}}},"pageContext":{"posts":[{"timeToRead":7,"excerpt":"In my previous post I introduced my latest library PHPoAuthUserData that allows to abstract the process of\nextracting user profile data from various OAuth providers (Facebook, Twitter, Linkedin, etc). The library still need a lot of work, especially to write the logic to extract data from all the services available in the parent OAuth library. At the moment the library supports only the most common OAuth providers. I would be glad to support all the following services: Amazon, BitBucket, BitLy, Box…","fields":{"slug":"writing-a-new-extractor-for-php-oauth-user-data"},"frontmatter":{"date":"10 February, 2014","title":"Writing a new Extractor for PHPoAuthUserData","tags":["library","php","oauth","instagram","github"],"header_img":{"publicURL":"/static/2b7feb53d0157af72b99ac387c4eaa0a/writing-a-new-extractor-for-php-oauth-user-data.png"}}},{"timeToRead":2,"excerpt":"I recently wrote a new PHP library to simplify the extraction of user data (name, email, id, etc…) from various OAuth providers such as Facebook, Twitter and Linkedin. Is well know that OAuth 1 and 2 are great standard protocols to authenticate users in our apps. Anyway we often need to go further the authentication process and extract various information about the authenticated users. Unfortunately this is something that is not standardized and obviously each OAuth provider manages user data in very…","fields":{"slug":"new-php-library-php-oauth-user-data"},"frontmatter":{"date":"10 February, 2014","title":"New PHP library: PHPoAuthUserData","tags":["library","php","oauth","github"],"header_img":{"publicURL":"/static/ddcc163ff1c49cc9df72dc028b58e5a7/new-php-library-php-oauth-user-data.png"}}}],"tag":"oauth"}},"staticQueryHashes":[]}