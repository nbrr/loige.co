{"componentChunkName":"component---src-templates-blog-post-share-image-js","path":"/writing-a-new-extractor-for-php-oauth-user-data/image_tw","result":{"data":{"site":{"siteMetadata":{"title":"Luciano Mammino \"Loige\" - Cloud developer, entrepreneur, fighter, butterfly maker!","author":"Luciano Mammino","siteUrl":"https://loige.co","twitterProfile":"loige","disqusShortName":"loige"}},"markdownRemark":{"id":"75ea61be-0923-55cf-9276-0609929a0a01","timeToRead":7,"headings":[{"value":"What is an extractor","depth":2},{"value":"Writing the Instagram extractor","depth":2}],"html":"<p>In my <a href=\"http://loige.com/new-php-library-php-oauth-user-data/\">previous post</a> I introduced my latest library <a href=\"https://github.com/Oryzone/PHPoAuthUserData\">PHPoAuthUserData</a> that allows to abstract the process of\nextracting user profile data from various OAuth providers (<em>Facebook</em>, <em>Twitter</em>, <em>Linkedin</em>, etc).</p>\n<p>The library still need a lot of work, especially to write the logic to extract data from all the services available in the <a href=\"https://github.com/Lusitanian/PHPoAuthLib\">parent OAuth library</a>.</p>\n<p>At the moment the library supports only the most common OAuth providers. I would be glad to support all the following services:</p>\n<p>Amazon, BitBucket, BitLy, Box, Dailymotion, Dropbox, Etsy, FitBit, Flickr, Foursquare, GitHub, Google, Heroku, Mailchimp, Microsoft, PayPal, Reddit, RunKeeper, SoundCloud, Tumblr, Vkontakte, Yammer.</p>\n<p>So that’s a lot of work! And yes, of course I would be glad to share it with someone interested in using the library.</p>\n<p>This article illustrates how to add support for a new service by writing a dedicate <strong>extractor</strong> class. It’s really simple so stick with me and you will be able to submit your pull request in minutes!</p>\n<h2 id=\"what-is-an-extractor\" style=\"position:relative;\"><a href=\"#what-is-an-extractor\" aria-label=\"what is an extractor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is an extractor</h2>\n<p>Extractors defines the logic to request information to a given service API and to normalize the received data according to a common <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/ExtractorInterface.php\">interface</a>.\nThe most basic way to define an extractor is to write a class that implements the <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/ExtractorInterface.php\">ExtractorInterface</a> (that is pretty self-explanatory).</p>\n<p>You could extend the class <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/Extractor.php\">Extractor</a> that implements most of the needed code to get you started. Anyway, extractors should <strong>really</strong> extend the class <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/LazyExtractor.php\">LazyExtractor</a> where possible\nbecause this class acts as a boilerplate to define highly optimized extractors. It easily allows you to implement extractors that <strong>lazy loads</strong> data (perform requests only when needed to) and <strong>caches</strong> data (does not make the same request more than once and avoids normalizing the same data more than once). Everything is done behind the scenes, so you’ll need to focus only on methods that define how to make\nrequests and how to normalize data.</p>\n<p>To understand how to write a new extractor by adopting the <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/LazyExtractor.php\">LazyExtractor</a> we need to clarify some concepts:</p>\n<ul>\n<li><strong>Supported fields</strong>: an array of the fields that can be extracted (you should use field constants from the <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/ExtractorInterface.php\">ExtractorInterface</a>).</li>\n<li><strong>Loaders</strong>: methods whose responsibility is to trigger the proper request to the OAuth provider endpoint to load a specific set of raw data. Generally you need to define a loader for each block of information that could be retrieved from the endpoint. this methods must have the suffix <code>Loader</code> in their name.\nMost of the service will allow you to retrieve all the user data with a single request, so, in this cases, you would have only a single loader method (eg: <code>profileLoader</code>).</li>\n<li><strong>Normalizers</strong>: methods that accept raw data (the one previously fetched by some loader method) and uses it to extract the value for a given field.\nUsually you have a normalizer for each supported field. Normalizers methods must have the suffix <code>Normalizer</code> (eg. <code>uniqueIdNormalizer</code> or <code>descriptionNormalizer</code>).</li>\n<li><strong>LoadersMap</strong>: an array that associates supported fields (keys) to loaders methods (values). Loaders methods must be referenced without the <code>Loader</code> suffix.\nMost of the time, if you have only the <code>profileLoader</code> loader you will have an array with all fields mapping to the string <code>profile</code>.</li>\n<li><strong>NormalizersMap</strong>: an array that associates supported fields (keys) to the related normalizer methods (values). Normalizers methods must be referenced without the <code>Normalizer</code> suffix. It’s highly suggested to use the same name of the field for its related normalizer, so, most of the time, you will end up by having an array that maps field constants to the same field constant (eg. <code>array(self::FIELD_UNIQUE_ID => self::FIELD_UNIQUE_ID)</code>) for\nevery supported field.</li>\n</ul>\n<p>Once you defined <em>Supported Fields</em>, <em>Loaders</em>, <em>Normalizers</em>, <em>Loaders Map</em> and <em>Normalizers Map</em> from within your new extractor class you must\nwire them to the underlying logic by passing them to the parent constructor. So if you defined methods such as <code>getSupportedField</code>, <code>getLoadersMap</code> and <code>getNormalizersMap</code>\nyou will end up with a constructor like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">parent</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span>\n        self<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">getLoadersMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        self<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">getNormalizersMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        self<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">getSupportedFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But let’s see how I built the <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/Instagram.php\">Instagram extractor</a> to have a better understanding on the whole process.</p>\n<h2 id=\"writing-the-instagram-extractor\" style=\"position:relative;\"><a href=\"#writing-the-instagram-extractor\" aria-label=\"writing the instagram extractor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing the Instagram extractor</h2>\n<p>First of all I had a look on <a href=\"http://instagram.com/developer/api-console/\">a bit of documentation</a> to find out what kind of data can be extracted from Instagram users.</p>\n<p>So I discovered that the request to retrieve information about the user is: <code>/users/self</code> and its response is a json object that looks like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"meta\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"username\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"johnnydonny\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"bio\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"A life on the edge\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"website\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://blog.johnnydonny.com\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"profile_picture\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://images.ak.instagram.com/profiles/profile_weird_numbers.jpg\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"full_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John Doe\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"counts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"media\"</span><span class=\"token operator\">:</span> <span class=\"token number\">131</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"followed_by\"</span><span class=\"token operator\">:</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"follows\"</span><span class=\"token operator\">:</span> <span class=\"token number\">64</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1111222333\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So I understood wich fields can be mapped and started writing the <code>Instagram</code> class under the <code>OAuth\\UserData\\Extractor</code> namespace.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">OAuth<span class=\"token punctuation\">\\</span>UserData<span class=\"token punctuation\">\\</span>Extractor</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Instagram</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">LazyExtractor</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>First of all I wrote the method <code>profileLoader</code> and added a class constant that defines the url of the request.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">const</span> <span class=\"token constant\">REQUEST_PROFILE</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'/users/self'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">profileLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">json_decode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">service</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">REQUEST_PROFILE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Each extractor has access to the property <code>$this->service</code> that is an instance of the specific OAuth service from the parent library (<code>OAuth\\OAuth2\\Service\\Instagram</code>) in this case. With this instance you can easily make request to the provider API endpoint.</p>\n<p>Then I added the <code>getSupportedFields</code> method:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getSupportedFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span>\n\t\tself<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">FIELD_UNIQUE_ID</span><span class=\"token punctuation\">,</span>\n\t\tself<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">FIELD_USERNAME</span><span class=\"token punctuation\">,</span>\n\t\tself<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">FIELD_FULL_NAME</span><span class=\"token punctuation\">,</span>\n\t\tself<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">FIELD_FIRST_NAME</span><span class=\"token punctuation\">,</span>\n\t\tself<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">FIELD_LAST_NAME</span><span class=\"token punctuation\">,</span>\n\t\tself<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">FIELD_DESCRIPTION</span><span class=\"token punctuation\">,</span>\n\t\tself<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">FIELD_WEBSITES</span><span class=\"token punctuation\">,</span>\n\t\tself<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">FIELD_IMAGE_URL</span><span class=\"token punctuation\">,</span>\n\t\tself<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">FIELD_PROFILE_URL</span><span class=\"token punctuation\">,</span>\n\t\tself<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">FIELD_EXTRA</span>\n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The fields <em>first</em>name<em>, _last</em>name_ and <em>profile</em>url_ are not directly available on the json response but are easy to reconstruct by using the <em>full</em>name_ and <em>username</em> fields.</p>\n<p>Than I started writing all the normalizer methods to map the raw data to the respective supported fields:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">uniqueIdNormalizer</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">usernameNormalizer</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'username'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fullNameNormalizer</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'full_name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'full_name'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">firstNameNormalizer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token variable\">$fullName</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getField</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">FIELD_FULL_NAME</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$fullName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token variable\">$names</span> <span class=\"token operator\">=</span> <span class=\"token function\">explode</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$fullName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token variable\">$names</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">lastNameNormalizer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token variable\">$fullName</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getField</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">FIELD_FULL_NAME</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$fullName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token variable\">$names</span> <span class=\"token operator\">=</span> <span class=\"token function\">explode</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$fullName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token variable\">$names</span><span class=\"token punctuation\">[</span><span class=\"token function\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$names</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">descriptionNormalizer</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'bio'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'bio'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">websitesNormalizer</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token variable\">$websites</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'website'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token variable\">$websites</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'website'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token variable\">$websites</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">profileUrlNormalizer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token variable\">$username</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getField</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">FIELD_USERNAME</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">null</span> <span class=\"token operator\">!==</span> <span class=\"token variable\">$username</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'http://instagram.com/%s'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$username</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">imageUrlNormalizer</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'profile_picture'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'profile_picture'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">extraNormalizer</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> ArrayUtils<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">removeKeys</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span>\n            <span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'username'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'full_name'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'website'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'profile_picture'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'bio'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice that each normalizer must return <code>null</code> if the field is not defined. That’s a best pratice to follow for safety.</p>\n<p>Also notice that the <code>extraNormalizer</code> method has the purpose to keep track of all the fields that could not be mapped to the <code>ExtractorInterface</code> fields. So we use the <code>OAuth\\UserData\\Utils\\ArrayUtils::removeKeys</code> method to simply remove already mapped data.</p>\n<p>Finally we need to wire our <code>profileLoader</code> method and all our normalizers methods in the constructor:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">parent</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span>\n\t\tself<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">getDefaultLoadersMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tself<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">getDefaultNormalizersMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tself<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">getSupportedFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The methods <code>self::getDefaultLoadersMap</code> and <code>self::getDefaultNormalizersMap</code> are convenience methods defined in the <code>LazyExtractor</code> class that defines respectively a loaders map and a normalizers map that are good in most of the cases.</p>\n<p>That’s all. To see the complete class have a look <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/Instagram.php\">here</a>.</p>\n<p><strong>Important note</strong>: if you are willing to submit a pull request to integrate a new extractor be sure to follow <a href=\"http://www.php-fig.org/psr/psr-2/\">PSR-2 code style</a> and to add a dedicated test case. Have a look at the <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/tests/OAuth/Unit/UserData/Extractor/InstagramTest.php\">InstagramTest</a> class to understand how to do it.</p>","frontmatter":{"title":"Writing a new Extractor for PHPoAuthUserData","slug":"writing-a-new-extractor-for-php-oauth-user-data","author":"Luciano Mammino","tags":["library","php","oauth","instagram","github"],"date":"February 10, 2014","header_img":{"publicURL":"/static/2b7feb53d0157af72b99ac387c4eaa0a/writing-a-new-extractor-for-php-oauth-user-data.png"}}}},"pageContext":{"slug":"writing-a-new-extractor-for-php-oauth-user-data","width":440,"height":220,"type":"twitter"}},"staticQueryHashes":[]}