{"componentChunkName":"component---src-templates-blog-post-js","path":"/integrating-twig-js-and-bazingajstranslationbundle/","result":{"data":{"site":{"siteMetadata":{"title":"Luciano Mammino \"Loige\" - Cloud developer, entrepreneur, fighter, butterfly maker!","author":"Luciano Mammino","siteUrl":"https://loige.co","twitterProfile":"loige","disqusShortName":"loige"}},"markdownRemark":{"id":"8473aa97-a949-5d98-8ea2-d134fcecd34e","fileAbsolutePath":"/home/circleci/loige.co/content/posts/2014-02-28_integrating-twig-js-and-bazingajstranslationbundle/index.md","excerpt":"Recently I had the need to run a twig template that uses the trans filter on my frontend using twig.js, a pure JavaScript port of twig…","timeToRead":3,"headings":[],"html":"<p>Recently I had the need to run a twig template that uses the <code>trans</code> filter on my frontend using <a href=\"http://jmsyst.com/libs/twig.js\">twig.js</a>, a pure JavaScript port of twig written by the good <a href=\"http://jmsyst.com/\">Johannes Schmitt</a>.\nThe JavaScript version does not handle all the functionalities offered by the original PHP version (even if it goes pretty close) and in particular it does not natively handle the <code>trans</code> filter.</p>\n<p>So, at first, I got a JavaScript runtime exception on my page when trying to use the template.\nLuckily enough the JavaScript version of twig is extensible like the PHP one and it is very easy to add new filters and functions.</p>\n<p>In my specific case I had a Symfony application where I was already using <a href=\"https://github.com/willdurand/BazingaJsTranslationBundle\">BazingaJsTranslationBundle</a> to manage dynamic translations on the frontend. As I discovered the twig.js extensibility, it was very easy to start building a twig.js extension by using the <code>Translator</code> JavaScript object offered by the Bazinga bundle.</p>\n<p><strong>Note</strong>: I will not go into the details about how to install twig.js and BazingaJsTranslationBundle in a Symfony application. You can find all the needed informations on their websites/github pages.</p>\n<p>In my first attempt I wrote something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Twig<span class=\"token punctuation\">.</span><span class=\"token function\">setFilter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'trans'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">,</span> domain<span class=\"token punctuation\">,</span> locale</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Translator<span class=\"token punctuation\">.</span><span class=\"token function\">trans</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">,</span> domain<span class=\"token punctuation\">,</span> locale<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>That seemed to work pretty good until I started to use translation strings with parameters. Parameters were not replaced with their respective values!\nThe problem laid in a subtle differece on how the BazingaJsTranslationBundle and the standard twig handle parameters. Let’s see a simple example.</p>\n<p>Suppose we have the string <code>hello %name%</code>. With twig we expect to do something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">{{ 'hello %name%'|trans({ '%name%' : 'Alice' }) }}</code></pre></div>\n<p>Note the <code>%</code> delimiters around the parameter name.</p>\n<p>The <code>Translator.trans</code> method expects an hash map without parameter delimiters in it. So we would have to do something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Translator<span class=\"token punctuation\">.</span><span class=\"token function\">trans</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello %name%\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'name'</span> <span class=\"token punctuation\">;</span> <span class=\"token string\">'Alice'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note that there’s no <code>%</code> delimiter this time.\nThe <code>Translator.trans</code> method manages the detection of parameters by itself and you can also decide to customize the delimiters by setting the values: <code>Translator.placeHolderPrefix</code> and <code>Translator.placeHolderSuffix</code>.\nObviously I suggest you to be consistent and use the same placeholders you use with PHP (especially if you need to share templates and translations from the backend to the frontend).</p>\n<p>So my final solution was the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Twig<span class=\"token punctuation\">.</span><span class=\"token function\">setFilter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'trans'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">,</span> domain<span class=\"token punctuation\">,</span> locale</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  params <span class=\"token operator\">=</span> params <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// normalizes params (removes placeholder prefixes and suffixes)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> key <span class=\"token keyword\">in</span> params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      params<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n      key<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> Translator<span class=\"token punctuation\">.</span>placeHolderPrefix <span class=\"token operator\">&amp;&amp;</span>\n      key<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> Translator<span class=\"token punctuation\">.</span>placeHolderSuffix\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      params<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> params<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">delete</span> params<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> Translator<span class=\"token punctuation\">.</span><span class=\"token function\">trans</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">,</span> domain<span class=\"token punctuation\">,</span> locale<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This way it automatically normalizes parameters for the <code>Translator</code> object (by removing any delimiter from parameter keys) and I have a consistent behavior between twig and twig.js.\nMy normalization approach is very rough and you can surely find a better approach (maybe using a regex).\nLet me know if you do it ;)</p>\n<p>Obviously you can also avoid the normalization and keep the responsibility to pass the parameters hash map in the way the <code>Translator</code> object expects it (without delimiters). In this case you can stick to my first implementation.</p>\n<p>That’s all. See ya ;)</p>","frontmatter":{"title":"Integrating Twig.js and BazingaJsTranslationBundle","meta_description":null,"slug":"integrating-twig-js-and-bazingajstranslationbundle","author":"Luciano Mammino","tags":["php","symfony","javascript","translation","twig"],"date":"February 28, 2014","dateISO":"2014-02-28T11:40:05.000Z","header_img":{"publicURL":"/static/c55fd49a6826ee1cf2f5094c5c5970d2/integrating-twig-js-and-bazingajstranslationbundle.png"},"fb_img":{"publicURL":"/static/f879793b1f35c5a90b82a7089143e803/integrating-twig-js-and-bazingajstranslationbundle-fb.png"},"tw_img":{"publicURL":"/static/3e802bee4364e903e1ef4a3a62206238/integrating-twig-js-and-bazingajstranslationbundle-tw.png"},"written_with":null}}},"pageContext":{"tags":["php","symfony","javascript","translation","twig"],"slug":"integrating-twig-js-and-bazingajstranslationbundle","previous":{"timeToRead":4,"excerpt":"The Symfony2 security component has the fame of being one of the most complex in the framework. I tend to believe that’s partially true, not because the component is really that complex, but because there are (really) a lot of concepts involved and it may be difficult to understand them all at once and have a clear vision as a whole. I am in the process of writing an OAuth bundle and I faced the need to deeply understand how the authentication process work in Symfony2 to being able to integrate the OAuth…","fields":{"slug":"symfony-security-authentication-made-simple"},"frontmatter":{"date":"14 February, 2014","title":"Symfony security: authentication made simple (well, maybe!)","tags":["php","symfony","security"],"header_img":{"publicURL":"/static/a049b3af819a1ab8374e1dacde3d8e4f/symfony-security-authentication-made-simple.png"}}},"next":{"timeToRead":8,"excerpt":"In this article I will show you how to set up a stand alone command line application by using the Symfony Console component and Pimple.  Writing console commands for Symfony (full stack framework) is easy and enjoyable. It helps a lot when you need to handle particular collateral tasks that are needed, in a way or another, to make your website running (processing and crunching data, make async requests, create reports, etc.). Anyway I discovered that writing stand alone command line applications using only…","fields":{"slug":"write-a-console-application-using-symfony-and-pimple"},"frontmatter":{"date":"15 March, 2014","title":"Write a console application using Symfony and Pimple","tags":["php","symfony","console","pimple"],"header_img":{"publicURL":"/static/91044114dc4bd9465a594a9032eb4924/write-a-console-application-using-symfony-and-pimple.png"}}},"similar":[{"slug":"6-rules-of-thumb-to-build-blazing-fast-web-applications","title":"6 Rules of thumb to build blazing fast web server applications","publishedAt":"25 July, 2015","score":2},{"slug":"symfony-edit-the-response-globally-using-the-kernel-response-event","title":"Symfony, edit the Response globally using the Kernel Response event","publishedAt":"21 February, 2015","score":2},{"slug":"transparent-pixel-response-with-symfony-how-to-track-email-opening","title":"Transparent pixel response with Symfony, how to track email opening","publishedAt":"13 June, 2014","score":2},{"slug":"write-a-console-application-using-symfony-and-pimple","title":"Write a console application using Symfony and Pimple","publishedAt":"15 March, 2014","score":2},{"slug":"symfony-security-authentication-made-simple","title":"Symfony security: authentication made simple (well, maybe!)","publishedAt":"14 February, 2014","score":2}]}},"staticQueryHashes":[]}