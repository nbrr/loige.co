{"componentChunkName":"component---src-templates-blog-post-share-image-js","path":"/new-php-library-php-oauth-user-data/image_fb","result":{"data":{"site":{"siteMetadata":{"title":"Luciano Mammino \"Loige\" - Cloud developer, entrepreneur, fighter, butterfly maker!","author":"Luciano Mammino","siteUrl":"https://loige.co","twitterProfile":"loige","disqusShortName":"loige"}},"markdownRemark":{"id":"8c957d62-fef2-5bc9-9915-9b645b6aa7c9","timeToRead":2,"headings":[],"html":"<p>I recently wrote a new <a href=\"https://github.com/Oryzone/PHPoAuthUserData\">PHP library</a> to simplify the extraction of user data (<em>name</em>, <em>email</em>, <em>id</em>, etc…) from various OAuth providers such as <em>Facebook</em>, <em>Twitter</em> and <em>Linkedin</em>.</p>\n<p>Is well know that OAuth 1 and 2 are great <em>standard</em> protocols to authenticate users in our apps. Anyway we often need to go further the authentication process and extract various information about the authenticated users. Unfortunately this is something that is not standardized and obviously each OAuth provider manages user data in very specific manner according to its specific purposes.</p>\n<p>So each OAuth provider offer a set of APIs with specific data schemes to allow developers to extract data about the authenticated users.</p>\n<p>That’s not a big deal if we build apps that adopts a single OAuth provider, but, if we want to adopt more of them, you need to deal with several different APIs and data schemes! Yes, things can get really cumbersome!</p>\n<p>Just to make things clearer suppose you want to allow users in your app to sign up with Facebook, Twitter and Linkedin. Probably, to increase conversion rate and speed up the sign up process, you may want to populate the user profile on your app by copying data from the OAuth provider user profile he used to sign up. Yes, you have to deal with 3 different sets of APIs and data schemes! And suppose you would be able to add GitHub and Google one day, that will count for 5 different APIs and data schemes… not so maintainable, isn’t it?</p>\n<p>The library I wrote is called <a href=\"https://github.com/Oryzone/PHPoAuthUserData\">PHPoAuthUserData</a>. It sits on top of the excellent OAuth library <a href=\"https://github.com/Lusitanian/PHPoAuthLib\">Lusitanian/PHPoAuthLib</a> and aims to resolve the user extraction data problem in the most simple and effective way.</p>\n<p>It offers a <em>uniform</em> and (really) simple interface to extract the most interesting and common user data such as <em>Name</em>, <em>Username</em>, <em>Id</em> and so on.</p>\n<p>Just to give you a <em>quick</em> idea of what is possible with the library have a look at the following snippet:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// $service is an istance of \\OAuth\\Common\\Service\\ServiceInterface (eg. the \"Facebook\" service) with a valid access token</span>\n\n<span class=\"token variable\">$extractorFactory</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token punctuation\">\\</span>OAuth<span class=\"token punctuation\">\\</span>UserData<span class=\"token punctuation\">\\</span>ExtractorFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$extractor</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$extractorFactory</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$service</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// get the extractor for the given service</span>\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$extractor</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getUniqueId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints out the unique id of the user</span>\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$extractor</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints out the username of the user</span>\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$extractor</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getImageUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints out the url of the user profile image</span></code></pre></div>\n<p>The code is available on <a href=\"https://github.com/Oryzone/PHPoAuthUserData\">Github</a> where you will find detailed information on how to install and use the library.</p>\n<p>I Hope you will enjoy it and be willing to contribute to the code base. If you want to know more, read the next post that explains <a href=\"http://loige.com/writing-a-new-extractor-for-php-oauth-user-data/\">how to write an extractor for the library</a>.</p>","frontmatter":{"title":"New PHP library: PHPoAuthUserData","slug":"new-php-library-php-oauth-user-data","author":"Luciano Mammino","tags":["library","php","oauth","github"],"date":"February 10, 2014","header_img":{"publicURL":"/static/ddcc163ff1c49cc9df72dc028b58e5a7/new-php-library-php-oauth-user-data.png"}}}},"pageContext":{"slug":"new-php-library-php-oauth-user-data","width":1200,"height":630,"type":"facebook"}},"staticQueryHashes":[]}