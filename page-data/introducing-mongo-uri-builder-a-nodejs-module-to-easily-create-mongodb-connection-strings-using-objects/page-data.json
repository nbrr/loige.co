{"componentChunkName":"component---src-templates-blog-post-js","path":"/introducing-mongo-uri-builder-a-nodejs-module-to-easily-create-mongodb-connection-strings-using-objects/","result":{"data":{"site":{"siteMetadata":{"title":"Luciano Mammino \"Loige\" - Cloud developer, entrepreneur, fighter, butterfly maker!","author":"Luciano Mammino","siteUrl":"https://loige.co","twitterProfile":"loige","disqusShortName":"loige"}},"markdownRemark":{"id":"a7e1b572-2749-5bf1-b1a1-4e747b56dbb3","fileAbsolutePath":"/home/circleci/loige.co/content/posts/2015-09-29_introducing-mongo-uri-builder-a-nodejs-module-to-easily-create-mongodb-connection-strings-using-objects/index.md","excerpt":"A couple of days ago I had the need to store the MongoDB connection string for a Node.js application I am currently building.\nOf course it…","timeToRead":3,"headings":[{"value":"The mongo-uri-builder package","depth":2},{"value":"Contributing & Issues","depth":2},{"value":"Wrap up","depth":2}],"html":"<p>A couple of days ago I had the need to store the MongoDB connection string for a Node.js application I am currently building.\nOf course it was not a big deal and at first I stored it in a file.\nAnyway at some point I realised that I would needed to override parts of this string to change some settings in <em>production</em> (e.g. adding replicas and authentication settings).\nFor this sake it would have been nice to have a way to store this configuration as a “well organised” object and then override just the properties I wanted to change.</p>\n<p>I often use the <a href=\"https://www.npmjs.com/package/config\">config</a> module to store my configuration and so I wanted to be able to do something like this in my configuration file:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"mongo\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"host\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"port\"</span><span class=\"token operator\">:</span> <span class=\"token number\">27017</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"database\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mydb\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"username\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"loige\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"password\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"whyDoYouWantToKnowMyPassword\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And then to be able to retrieve this data and use it with a new <code>MongoClient</code> instance:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> MongoClient <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongodb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>MongoClient\n<span class=\"token keyword\">var</span> config <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'config'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> mongoConfig <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongo'</span><span class=\"token punctuation\">)</span>\nMongoClient<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">createConnectionString</span><span class=\"token punctuation\">(</span>mongoConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> db</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The missing bit here was the function <code>createConnectionString</code>. How to do that?\nI made a quick search on NPM and I wasn’t able to find something ready to be used… So, given that it was a quite easy task and that I enjoy to create new packages, I decided to build it by myself: welcome <strong><a href=\"https://www.npmjs.com/package/mongo-uri-builder\">mongo-uri-builder</a></strong>! <strong>It’s alive!</strong></p>\n<p><img src=\"/content/6ec5a3c468cd42be26bf2a5d81c7b7ab/mongodb-connection-string-builder-its-alive-frankestain.gif\" alt=\"Frankestain it&#x27;s alive feeling when creating a new NPM library\"></p>\n<p>(Yes, this was sort of the feeling I had after launching <code>npm publish</code>, call me crazy…)</p>\n<h2 id=\"the-mongo-uri-builder-package\" style=\"position:relative;\"><a href=\"#the-mongo-uri-builder-package\" aria-label=\"the mongo uri builder package permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The mongo-uri-builder package</h2>\n<p><code>mongo-uri-builder</code> is a Node.js package to easily create mongodb connection strings using configuration objects.</p>\n<p>The configuration object that the module expects looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> mongoConnectionConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  username<span class=\"token operator\">:</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// the username</span>\n  password<span class=\"token operator\">:</span> <span class=\"token string\">'pass'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// the password</span>\n  host<span class=\"token operator\">:</span> <span class=\"token string\">'host1'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// the main host (default: \"localhost\")</span>\n  port<span class=\"token operator\">:</span> <span class=\"token number\">1111</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// the main port</span>\n  replicas<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// an array of replica databases</span>\n    <span class=\"token comment\">// every replica must define an host, the port is optional</span>\n    <span class=\"token punctuation\">{</span> host<span class=\"token operator\">:</span> <span class=\"token string\">'host2'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">:</span> <span class=\"token number\">2222</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> host<span class=\"token operator\">:</span> <span class=\"token string\">'host3'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">:</span> <span class=\"token number\">3333</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  database<span class=\"token operator\">:</span> <span class=\"token string\">'db'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// the name of the database</span>\n  options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// an arbitrary object of connection options</span>\n    w<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    readPreference<span class=\"token operator\">:</span> <span class=\"token string\">'secondary'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>All the properties are optional and you can even use an empty object. The classic <code>mongodb://localhost</code> will be generated as default in this case.</p>\n<p>As we are used with NPM, installing the module is as easy as running:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save mongo-uri-builder</code></pre></div>\n<p>Then to use it you can do something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> mongoUriBuilder <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongo-uri-builder'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> connectionString <span class=\"token operator\">=</span> <span class=\"token function\">mongoUriBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  username<span class=\"token operator\">:</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">,</span>\n  password<span class=\"token operator\">:</span> <span class=\"token string\">'pass'</span><span class=\"token punctuation\">,</span>\n  host<span class=\"token operator\">:</span> <span class=\"token string\">'host1'</span><span class=\"token punctuation\">,</span>\n  port<span class=\"token operator\">:</span> <span class=\"token number\">1111</span><span class=\"token punctuation\">,</span>\n  replicas<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> host<span class=\"token operator\">:</span> <span class=\"token string\">'host2'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">:</span> <span class=\"token number\">2222</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> host<span class=\"token operator\">:</span> <span class=\"token string\">'host3'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">:</span> <span class=\"token number\">3333</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  database<span class=\"token operator\">:</span> <span class=\"token string\">'db'</span><span class=\"token punctuation\">,</span>\n  options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    w<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    readPreference<span class=\"token operator\">:</span> <span class=\"token string\">'secondary'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>connectionString<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// outputs \"mongodb://user:pass@host1:1111,host2:2222,host3:3333/db?w=0&amp;readPreference=secondary\"</span></code></pre></div>\n<p>How easy and “well-readable” it is now? :)</p>\n<h2 id=\"contributing--issues\" style=\"position:relative;\"><a href=\"#contributing--issues\" aria-label=\"contributing  issues permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contributing &#x26; Issues</h2>\n<p>As I often do I put the code of the module on GitHub, you can find the repository at <a href=\"https://github.com/lmammino/mongo-uri-builder\">lmammino/mongo-uri-builder</a>.\nEveryone is more than welcome to contribute to the project. You can contribute just by submitting bugs and pull requests or suggesting improvements by <a href=\"https://github.com/lmammino/mongo-uri-builder/issues\">opening an issue</a>.</p>\n<h2 id=\"wrap-up\" style=\"position:relative;\"><a href=\"#wrap-up\" aria-label=\"wrap up permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wrap up</h2>\n<p>This module is really something naive but it is a nice thing to have for me, especially in conjunction with <code>config</code>, that allows me to have different configuration files for every environment (e.g. <code>development</code> and <code>production</code>) and to override properties from a <code>default</code> configuration file.\nThis way I can just override the parts of the connection string that are effectively different from the default configuration. I can even <a href=\"https://github.com/lorenwest/node-config/wiki/Environment-Variables\">use environment variables</a> if I don’t want for example to store the username and password of my database as clear text in a file.</p>\n<p>I really look forward to knowing what you think about it and if you found it useful. Of course I also hope that you will be willing to give it a spin in your next Node.js project.</p>\n<p>Ah, yeah, if you liked it don’t forget to share the love and “star” it on <a href=\"https://github.com/lmammino/mongo-uri-builder\">Github</a> and <a href=\"https://www.npmjs.com/package/mongo-uri-builder\">Npm</a>! ;)</p>\n<p>Cheers!</p>","frontmatter":{"title":"Introducing mongo-uri-builder, a Node.js module to easily create mongodb connection strings using objects","meta_description":null,"slug":"introducing-mongo-uri-builder-a-nodejs-module-to-easily-create-mongodb-connection-strings-using-objects","author":"Luciano Mammino","tags":["node-js","library","mongodb","github"],"date":"September 29, 2015","dateISO":"2015-09-29T23:07:02.000Z","header_img":{"publicURL":"/static/2631a85bd72a9afcb89633ddc1e4af8d/mongo-uri-builder-article-sample-image.jpg"},"fb_img":{"publicURL":"/static/6556a5207caa59dcf1d3c3ac5bf7e4b9/introducing-mongo-uri-builder-a-nodejs-module-to-easily-create-mongodb-connection-strings-using-objects-fb.png"},"tw_img":{"publicURL":"/static/75b518187b3dbc8fd968372986cc71ed/introducing-mongo-uri-builder-a-nodejs-module-to-easily-create-mongodb-connection-strings-using-objects-tw.png"}}}},"pageContext":{"tags":["node-js","library","mongodb","github"],"slug":"introducing-mongo-uri-builder-a-nodejs-module-to-easily-create-mongodb-connection-strings-using-objects","previous":{"timeToRead":1,"excerpt":"I recently wrote a Slack bot in Node.js in collaboration with one of my favourite web development websites: the amazing Scotch.io. It’s a simple and funny experiment I have done in my free time to learn something new. It’s nothing special but it will add a bit of fun inside your Slack organisation… Who doesn’t want to have a bot that tells random jokes about Chuck Norris in his own Company chat room? :) The bot is available on Github (lmammino/norrisbot) and on NPM (norrisbot) and it can be easily installed…","fields":{"slug":"having-fun-with-nodejs-slack-and-chuck-norris"},"frontmatter":{"date":"14 September, 2015","title":"Having fun with Node.js, Slack and Chuck Norris","tags":["node-js","slack","collaboration"],"header_img":{"publicURL":"/static/8c6cc21b8df7bd6c91459707a6b749fd/having-fun-with-nodejs-slack-and-chuck-norris.jpg"}}},"next":{"timeToRead":7,"excerpt":"In this post I will explain you how to use Gulp to interact with the files on your server through FTP. You will learn how to watch the files you are editing on your local machine and automatically synchronize them with your server as they change and how to setup a task to launch an FTP deploy on demand. Premise Few days ago I was assigned to take care of updating few sections on a legacy website which development environment is currently accessible only through FTP. So no local virtualized development…","fields":{"slug":"gulp-and-ftp-update-a-website-on-the-fly"},"frontmatter":{"date":"25 October, 2015","title":"Gulp and FTP: update a website \"on the fly\"","tags":["gulp","javascript","ftp","server"],"header_img":{"publicURL":"/static/0289aa15c192504a21a1d087e8240b71/gulp-and-ftp-update-a-website-on-the-fly-1.png"}}},"similar":[{"slug":"unshorten-expand-short-urls-with-node-js","title":"Unshorten (expand) short URLs with Node.js","publishedAt":"31 March, 2017","score":2},{"slug":"introducing-gulp-cozy-manage-your-gulp-tasks-in-a-cozier-way","title":"Introducing Gulp cozy - Manage your gulp tasks in a cozier way","publishedAt":"18 January, 2016","score":2},{"slug":"new-php-library-php-oauth-user-data","title":"New PHP library: PHPoAuthUserData","publishedAt":"10 February, 2014","score":2},{"slug":"writing-a-new-extractor-for-php-oauth-user-data","title":"Writing a new Extractor for PHPoAuthUserData","publishedAt":"10 February, 2014","score":2},{"slug":"middy-1-is-here","title":"Middy 1.0.0 is here","publishedAt":"26 April, 2020","score":1}]}},"staticQueryHashes":[]}